#include "engine.hpp"
#include "modules/solver/agent/discrete/dVRACER/dVRACER.hpp"
#include "omp.h"
#include "sample/sample.hpp"

__startNamespace__;

void __className__::initializeAgent()
{
  // Initializing common discrete agent configuration
  Discrete::initializeAgent();

  // Init statistics
  _statisticsAverageActionSigmas.resize(_problem->_actionVectorSize);

  /*********************************************************************
 * Initializing Critic/Policy Neural Network Optimization Experiment
 *********************************************************************/

  _criticPolicyExperiment["Problem"]["Type"] = "Supervised Learning";
  _criticPolicyExperiment["Problem"]["Max Timesteps"] = _timeSequenceLength;
  _criticPolicyExperiment["Problem"]["Training Batch Size"] = _miniBatchSize;
  _criticPolicyExperiment["Problem"]["Inference Batch Size"] = 1;
  _criticPolicyExperiment["Problem"]["Input"]["Size"] = _problem->_stateVectorSize;
  _criticPolicyExperiment["Problem"]["Solution"]["Size"] = 1 + _problem->_possibleActions.size();

  _criticPolicyExperiment["Solver"]["Type"] = "Learner/DeepSupervisor";
  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Enabled"] = _l2RegularizationEnabled;
  _criticPolicyExperiment["Solver"]["L2 Regularization"]["Importance"] = _l2RegularizationImportance;
  _criticPolicyExperiment["Solver"]["Learning Rate"] = _currentLearningRate;
  _criticPolicyExperiment["Solver"]["Loss Function"] = "Direct Gradient";
  _criticPolicyExperiment["Solver"]["Steps Per Generation"] = 1;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Optimizer"] = _neuralNetworkOptimizer;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Engine"] = _neuralNetworkEngine;
  _criticPolicyExperiment["Solver"]["Neural Network"]["Hidden Layers"] = _neuralNetworkHiddenLayers;
  _criticPolicyExperiment["Solver"]["Output Weights Scaling"] = 0.001;

  // Running initialization to verify that the configuration is correct
  _criticPolicyExperiment.initialize();
  _criticPolicyProblem = dynamic_cast<problem::SupervisedLearning *>(_criticPolicyExperiment._problem);
  _criticPolicyLearner = dynamic_cast<solver::learner::DeepSupervisor *>(_criticPolicyExperiment._solver);
}

void __className__::trainPolicy()
{
  // Obtaining Minibatch experience ids
  const auto miniBatch = generateMiniBatch(_miniBatchSize);

  // Gathering state sequences for selected minibatch
  const auto stateSequence = getMiniBatchStateSequence(miniBatch);

  // Running policy NN on the Minibatch experiences
  const auto policyInfo = runPolicy(stateSequence);

  // Using policy information to update experience's metadata
  updateExperienceMetadata(miniBatch, policyInfo);

  // Now calculating policy gradients
  calculatePolicyGradients(miniBatch);

  // Updating learning rate for critic/policy learner guided by REFER
  _criticPolicyLearner->_learningRate = _currentLearningRate;

  // Now applying gradients to update policy NN
  _criticPolicyLearner->runGeneration();
}

void __className__::calculatePolicyGradients(const std::vector<size_t> &miniBatch)
{
  const size_t miniBatchSize = miniBatch.size();

#pragma omp parallel for
  for (size_t b = 0; b < miniBatchSize; b++)
  {
    // Getting index of current experiment
    size_t expId = miniBatch[b];

    // Getting experience policy data
    const auto &expPolicy = _expPolicyVector[expId];
    // Getting current policy data
    const auto &curPolicy = _curPolicyVector[expId];

    std::vector<std::vector<float>> cPvals (_problem->_agentsPerEnvironment, std::vector<float>(curPolicy[0].distributionParameters.size()));
    std::vector<std::vector<float>> ePvals (_problem->_agentsPerEnvironment, std::vector<float>(expPolicy[0].distributionParameters.size()));
    std::vector<size_t> actIdx (_problem->_agentsPerEnvironment);

    for (size_t d = 0; d < _problem->_agentsPerEnvironment; d++)
    {
      cPvals[d] = curPolicy[d].distributionParameters;
      ePvals[d] = expPolicy[d].distributionParameters;
      actIdx[d] = expPolicy[d].actionIndex;
    }

    const auto &expPvals = ePvals;
    const auto &expActionIdx = actIdx;
    const auto &curPvals = cPvals;


    // Getting value evaluation
    const std::vector<float> V = _stateValueVector[expId];
    const std::vector<float> expVtbc = _retraceValueVector[expId];

    // Storage for the update gradient
    std::vector<std::vector<float>> gradientLoss(_problem->_agentsPerEnvironment, std::vector(1 + _problem->_possibleActions.size(),0.0f));

    for (size_t d = 0; d < _problem->_agentsPerEnvironment; d++)
    {
      // Gradient of Value Function V(s) (eq. (9); *-1 because the optimizer is maximizing)
      gradientLoss[d][0] = expVtbc[d] - V[d];

      // Compute policy gradient only if inside trust region (or offPolicy disabled)
      if (_isOnPolicyVector[expId][d])
      {
        // Qret for terminal state is just reward
        float Qret = getScaledReward(_rewardVector[expId][d],d);

        // If experience is non-terminal, add Vtbc
        if (_terminationVector[expId] == e_nonTerminal)
        {
          float nextExpVtbc = _retraceValueVector[expId + 1][d];
          Qret += _discountFactor * nextExpVtbc;
        }

        // If experience is truncated, add truncated state value
        if (_terminationVector[expId] == e_truncated)
        {
          float nextExpVtbc = _truncatedStateValueVector[expId][d];
          Qret += _discountFactor * nextExpVtbc;
        }

        // Compute Off-Policy Objective (eq. 5)
        float lossOffPolicy = Qret - V[d];

        // Compute Policy Gradient wrt Params
        auto polGrad = calculateImportanceWeightGradient(expActionIdx, curPvals, expPvals);

        // Set Gradient of Loss wrt Params
        for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
        {
          // '-' because the optimizer is maximizing
          gradientLoss[d][1 + i] = _experienceReplayOffPolicyREFERBeta[d] * lossOffPolicy * polGrad[d][i];
        }
      }
    }
    // Compute derivative of kullback-leibler divergence wrt current distribution params
    auto klGrad = calculateKLDivergenceGradient(expPvals, curPvals);
    for (size_t d = 0; d < _problem->_agentsPerEnvironment; d++)
    {
      for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
      {
        // Step towards old policy (gradient pointing to larger difference between old and current policy)
        gradientLoss[d][1 + i] -= (1.0f - _experienceReplayOffPolicyREFERBeta[d]) * klGrad[d][i];

        if (std::isfinite(gradientLoss[d][i]) == false)
          KORALI_LOG_ERROR("Gradient loss returned an invalid value: %f\n", gradientLoss[d][i]);
      }
      _criticPolicyProblem->_solutionData[b* _problem->_agentsPerEnvironment + d] = gradientLoss[d];
    }
  }

  // Compute average action stadard deviation
  for (size_t j = 0; j < _problem->_actionVectorSize; j++) _statisticsAverageActionSigmas[j] /= (float)miniBatchSize;
}

std::vector<std::vector<policy_t>> __className__::runPolicy(const std::vector<std::vector<std::vector<float>>> &stateBatch)
{
  // Getting batch size
  size_t batchSize = stateBatch.size();

  // Storage for policy
  std::vector<policy_t> policyVector(batchSize);

  // Forward the neural network for this state
  const auto evaluation = _criticPolicyLearner->getEvaluation(stateBatch);

#pragma omp parallel for
  for (size_t b = 0; b < batchSize; b++)
  {
    // Getting state value
    policyVector[b].stateValue = evaluation[b][0];

    // Storage for action probabilities
    float maxq = -korali::Inf;
    std::vector<float> qval(_problem->_possibleActions.size());
    std::vector<float> pActions(_problem->_possibleActions.size());

    // Iterating all Q(s,a)
    for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
    {
      // Computing Q(s,a_i)
      qval[i] = evaluation[b][1 + i];

      // Extracting max Q(s,a_i)
      if (qval[i] > maxq) maxq = qval[i];
    }

    // Storage for the cumulative e^Q(s,a_i)/maxq
    float sumExpQVal = 0.0;

    for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
    {
      // Computing e^(Q(s,a_i) - maxq)
      float expCurQVal = std::exp(qval[i] - maxq);

      // Computing Sum_i(e^Q(s,a_i)/e^maxq)
      sumExpQVal += expCurQVal;

      // Storing partial value of the probability of the action
      pActions[i] = expCurQVal;
    }

    // Calculating inverse of Sum_i(e^Q(s,a_i))
    float invSumExpQVal = 1.0f / sumExpQVal;

    // Normalizing action probabilities
    for (size_t i = 0; i < _problem->_possibleActions.size(); i++)
      pActions[i] *= invSumExpQVal;

    // Storing the action probabilities into the policy
    policyVector[b].distributionParameters = pActions;
  }

  if (batchSize % _problem->_agentsPerEnvironment > 0) 
    KORALI_LOG_ERROR("Batch size (%lu) not divisible by the number of agents (%lu) .\n", batchSize, _problem->_agentsPerEnvironment);
  auto effectiveBatchSize = batchSize / _problem->_agentsPerEnvironment;

  // TODO: make this somehow work 
  //auto effectiveBatchSize = _solver->_miniBatchSize;

  std::vector<std::vector<policy_t>> policyMatrix (effectiveBatchSize, std::vector<policy_t>(_problem->_agentsPerEnvironment));

  for (size_t i = 0; i < effectiveBatchSize; i++)
    for (size_t d = 0; d< _problem->_agentsPerEnvironment; d++)
    {
      policyMatrix[i][d] = policyVector[i * _problem->_agentsPerEnvironment + d];
    }

  return policyMatrix;
}

knlohmann::json __className__::getAgentPolicy()
{
  knlohmann::json hyperparameters;
  hyperparameters["Policy"] = _criticPolicyLearner->getHyperparameters();
  return hyperparameters;
}

void __className__::setAgentPolicy(const knlohmann::json &hyperparameters)
{
  _criticPolicyLearner->setHyperparameters(hyperparameters["Policy"].get<std::vector<float>>());
}

void __className__::printAgentInformation()
{
  _k->_logger->logInfo("Normal", " + [dVRACER] Policy Learning Rate: %.3e\n", _currentLearningRate);
}

__moduleAutoCode__;

__endNamespace__;
