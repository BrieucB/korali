#pragma once

#include "modules/problem/reinforcementLearning/discrete/discrete.hpp"
#include "modules/solver/agent/agent.hpp"

__startNamespace__;

class __className__ : public __parentClassName__
{
  public:
  /**
 * @brief Storage for the pointer to the (discrete) learning problem
 */
  problem::reinforcementLearning::Discrete *_problem;

  std::vector<float> calculateImportanceWeight(const std::vector<std::vector<float>> &action, const std::vector<policy_t> &curPolicy, const std::vector<policy_t> &oldPolicy) override;

  /**
   * @brief Calculates the gradient of importance weight wrt to NN output
   * @param actionIdx Action from memory
   * @param curPvalues todo
   * @param oldPvalues todo
   * @return gradient of importance weight wrt NN output
   */

  
  std::vector<std::vector<float>> calculateImportanceWeightGradient(const std::vector<size_t> actionIdx, const std::vector<std::vector<float>> &curPvalues, const std::vector<std::vector<float>> &oldPvalues);

  /**
   * @brief Calculates the gradient of KL(p_old, p_cur) wrt to the parameter of the 2nd (current) distribution.
   * @param oldPvalues todo
   * @param curPvalues todo
   * @return gradient of KL wrt curParamsOne and curParamsTwo
   */
  std::vector<std::vector<float>> calculateKLDivergenceGradient(const std::vector<std::vector<float>> &oldPvalues, const std::vector<std::vector<float>> &curPvalues);

  void getAction(korali::Sample &sample) override;
  virtual void initializeAgent() override;
};

__endNamespace__;
